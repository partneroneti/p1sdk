package com.projeto.photoface;

import android.content.Context;
import android.content.Intent;
import android.util.Base64;
import android.util.Log;

import com.facetec.sdk.FaceTecFaceScanResultCallback;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;
import com.google.gson.Gson;
import com.otaliastudios.cameraview.PictureResult;
import com.projeto.photoface.entity.body.AuthenticationBody;
import com.projeto.photoface.entity.body.Cpf;
import com.projeto.photoface.entity.body.DocumentBody;
import com.projeto.photoface.entity.body.Documento;
import com.projeto.photoface.entity.body.LivenessTBody;
import com.projeto.photoface.entity.response.AuthObj;
import com.projeto.photoface.entity.response.CpfObj;
import com.projeto.photoface.entity.response.LivenessResponse;
import com.projeto.photoface.entity.response.SessionLiveResponse;
import com.projeto.photoface.entity.response.StatusObj;
import com.projeto.photoface.request.Request;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class CallLib {

    public static CallBackCapture callback;
    public static AuthObj authResponse;
    public static Integer status;
    private static Request service;
    private static Cpf cpf = new Cpf();
    private static Context mContext;
    public static String transactionId;
    public static String mBaseUrl;
    public static String mUrlDocLive;
    public static String user;
    public static String password;

    public static String mCertKey;
    public static String mDeviceKeyIdentifier;

    private static String TAG = "CallLib";

    public static void callActivityDocument(Context context) {
        Intent intent = new Intent(context, CameraDocumentActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        context.startActivity(intent);
    }

    public static void callLivenessActivity(Context context) {
        Intent intent = new Intent(context, LivenessActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        context.startActivity(intent);
    }

    public static void start(
            Context context,
            String certKey,
            String deviceKeyIdentifier,
            String baseUrl,
            String user,
            String password,
            String urlDocLive
    ) {
        mCertKey = certKey;
        mDeviceKeyIdentifier = deviceKeyIdentifier;
        mContext = context;
        mBaseUrl = baseUrl;
        mUrlDocLive = urlDocLive;
        CallLib.user = user;
        CallLib.password = password;

        Config.initializeFaceTecSDKFromAutogeneratedConfig(
                mContext,
                mDeviceKeyIdentifier,
                mCertKey,
                new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(boolean b) {
                Log.e(TAG , " start() - onCompletion");
            }
        });
        ThemeHelpers.setAppTheme(mContext, "Pseudo-Fullscreen");
    }

    public static void call(String cpfInput, CallBackCapture cb) {
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(mBaseUrl)
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        service = retrofit.create(Request.class);
        cpf.setCpf(cpfInput);
        callback = cb;

        AuthenticationBody ab = new AuthenticationBody();
        ab.setGrantType("password");
        ab.setPassword(password);
        ab.setUsername(user);
        Call<AuthObj> callAuth = service.authentication(ab);

        callAuth.enqueue(new Callback<AuthObj>() {
            @Override
            public void onResponse(Call<AuthObj> call, Response<AuthObj> response) {

                if (response.body() != null) {
                    callback.onAuthObjResponse(response.body());
                }
                authResponse = response.body();
                callCpf();
            }

            @Override
            public void onFailure(Call<AuthObj> call, Throwable t) {
                Log.w(TAG, "onFailure");
            }
        });
    }

    private static void callCpf() {
        Call<CpfObj> callCpf = service.cpfStatus(cpf, "Bearer " + authResponse.getObjectReturn().getAccessToken());
        callCpf.enqueue(new Callback<CpfObj>() {
            @Override
            public void onResponse(Call<CpfObj> call, Response<CpfObj> response) {

                if (response.body() != null) {
                    callback.onCpfObjResponse(response.body());
                }

                transactionId = response.body().getObjectReturn().getTransactionId();
                callTransaction(new CallBackStatus() {
                    @Override
                    public void onFinish() {

                    }
                });
            }

            @Override
            public void onFailure(Call<CpfObj> call, Throwable t) {
                t.printStackTrace();
            }
        });
    }

    public static void callTransaction(CallBackStatus cbs) {
        Call<StatusObj> callStatus = service.checkStatus(transactionId, "Bearer " + authResponse.getObjectReturn().getAccessToken());
        callStatus.enqueue(new Callback<StatusObj>() {
            @Override
            public void onResponse(Call<StatusObj> call, Response<StatusObj> response) {

                if (response.body() != null) {
                    callback.onStatusObjResponse(response.body());
                }

                status = response.body().getObjectReturn().getResult().getStatus();
                switch (status) {
                    case 0:// transaçao em processamento
                    case 1:// transaçao aprovada
                    case 2:// transaçao reprovada
                        callback.finish();
                        break;
                    case 3:
                        //FaceTecSDK.getStatus(contextApp)
                        CallLib.callLivenessActivity(mContext);
                        break;
                    case 4:
                        CallLib.callActivityDocument(mContext);
                        break;
                    default:
                        callback.finish();
                        break;// Status indefinido
                }
            }

            @Override
            public void onFailure(Call<StatusObj> call, Throwable t) {

            }
        });
    }

    public static void callTransactionStatus(CallBackStatus cbc) {
        Call<StatusObj> callStatus = service.checkStatus(transactionId, "Bearer " + authResponse.getObjectReturn().getAccessToken());
        callStatus.enqueue(new Callback<StatusObj>() {
            @Override
            public void onResponse(Call<StatusObj> call, Response<StatusObj> response) {

                if (response.body() != null) {
                    callback.onStatusObjResponse(response.body());
                }

                status = response.body().getObjectReturn().getResult().getStatus();
                cbc.onFinish();
            }

            @Override
            public void onFailure(Call<StatusObj> call, Throwable t) {

            }
        });
    }

    public static void callLiveSession(FaceTecSessionResult faceTecSessionResult, FaceTecFaceScanResultCallback faceTecFaceScanResultCallback) {
        Call<SessionLiveResponse> callSession = service.sessionLive("Bearer " + authResponse.getObjectReturn().getAccessToken());
        callSession.enqueue(new Callback<SessionLiveResponse>() {
            @Override
            public void onResponse(Call<SessionLiveResponse> call, Response<SessionLiveResponse> response) {

                if (response.body() != null) {
                    callback.onSessionLiveResponse(response.body());
                }

                liveNess(faceTecSessionResult, faceTecFaceScanResultCallback);
            }

            @Override
            public void onFailure(Call<SessionLiveResponse> call, Throwable t) {

            }
        });
    }

    private static void liveNess(FaceTecSessionResult faceTecSessionResult, FaceTecFaceScanResultCallback faceTecFaceScanResultCallback) {

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(mUrlDocLive)
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        Request serviceDocumento = retrofit.create(Request.class);

        LivenessTBody live = new LivenessTBody();
        live.setTransactionId(transactionId);
        live.setFaceScan(Base64.encodeToString(faceTecSessionResult.getFaceScan(), Base64.DEFAULT).replaceAll("\n", ""));

        live.setAuditTrailImage(faceTecSessionResult.getAuditTrailCompressedBase64()[0].replaceAll("\n", ""));
        live.setLowQualityAuditTrailImage(faceTecSessionResult.getLowQualityAuditTrailCompressedBase64()[0].replaceAll("\n", ""));
        new Gson().toJson(live);
        Call<LivenessResponse> callLive = serviceDocumento.liveness(live, "Bearer " + authResponse.getObjectReturn().getAccessToken());
        callLive.enqueue(new Callback<LivenessResponse>() {
            @Override
            public void onResponse(Call<LivenessResponse> call, Response<LivenessResponse> response) {

                if (response.body() != null && response.body().getObjectReturn().getCode() != null) {

                    callback.onLivenessResponse(response.body());

                    switch (response.body().getObjectReturn().getCode()) {
                        case 3: {
                            status = 2;
                            break;
                        }
                        case 1: {
                            status = 0;
                        }
                    }
                }

                faceTecFaceScanResultCallback.cancel();
                callback.finish();
            }

            @Override
            public void onFailure(Call<LivenessResponse> call, Throwable t) {
                Log.i("err", "err");
                faceTecFaceScanResultCallback.cancel();
                callback.finish();
            }
        });
    }

    public static void sendDocument(PictureResult frente, PictureResult verso) {

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(mUrlDocLive)
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        Request serviceDocumento = retrofit.create(Request.class);

        List<Documento> listDoc = new ArrayList<>();
        Documento frenteDoc = new Documento();
        frenteDoc.setType("FRENTE");
        frenteDoc.setByte(Base64.encodeToString(frente.getData(), Base64.DEFAULT).replaceAll("\n", ""));
        Documento versoDoc = new Documento();
        versoDoc.setType("VERSO");
        versoDoc.setByte(Base64.encodeToString(verso.getData(), Base64.DEFAULT).replaceAll("\n", ""));
        listDoc.add(frenteDoc);
        listDoc.add(versoDoc);
        DocumentBody db = new DocumentBody();
        db.setTransactionId(transactionId);
        db.setDocumentos(listDoc);
        status = 0;

        Call<DocumentBody> sendDocument = serviceDocumento.sendDocument(db, "Bearer " + authResponse.getObjectReturn().getAccessToken());
        sendDocument.enqueue(new Callback<DocumentBody>() {
            @Override
            public void onResponse(Call<DocumentBody> call, Response<DocumentBody> response) {
                if (response.body() != null) {
                    callback.onDocumentBodyResponse(response.body());
                }
                callback.finish();
            }

            @Override
            public void onFailure(Call<DocumentBody> call, Throwable t) {
                Log.i(TAG, "sendDocument: onFailure");
                callback.finish();
            }
        });
    }


}
